/**
 * @fileoverview Firestore Security Rules for the e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and products.
 * Affiliates have their own data, secured by ownership.
 * Read-only collections like banners, platform config, subscription tiers, categories, and locations are publicly readable.
 * Orders are accessible only to the user who created them.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /products/{productId}: Product listings.
 * - /orders/{orderId}: Customer orders.
 * - /affiliates/{affiliateId}: Affiliate user data.
 * - /banners/{bannerId}: Promotional banners.
 * - /config/platform: Global platform settings.
 * - /affiliateEvents/{eventId}: Affiliate tracking events.
 * - /subscriptionTiers/{tierId}: Subscription plans.
 * - /categories/{categoryId}: Product categories.
 * - /locations/{locationId}: Geographical locations.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - Products are only manageable by the selling user.
 * - Orders are only accessible to the user who created them.
 * - Banners, platform config, subscription tiers, categories, and locations are publicly readable.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Products have a `sellerId` field to simplify ownership checks.
 * - Orders have a `userId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their profile if their UID matches the {userId}.
     * @allow (get) - User can read their own profile.
     * @allow (update) - User can update their own profile.
     * @allow (delete) - User can delete their own profile.
     * @deny (create) - User cannot create a profile with a mismatched ID.
     * @deny (get) - User cannot read another user's profile.
     * @deny (update) - User cannot update another user's profile.
     * @deny (delete) - User cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for product listings.
     * @path /products/{productId}
     * @allow (create) - User can create a product if they are the seller.
     * @allow (get) - Anyone can read a product listing.
     * @allow (update) - User can update their own product listing.
     * @allow (delete) - User can delete their own product listing.
     * @deny (create) - User cannot create a product for another seller.
     * @deny (update) - User cannot update another user's product listing.
     * @deny (delete) - User cannot delete another user's product listing.
     * @principle Enforces document ownership for product listings.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.sellerId);
      allow delete: if isExistingOwner(resource.data.sellerId);
    }

    /**
     * @description Security rules for customer orders.
     * @path /orders/{orderId}
     * @allow (create) - User can create an order if they are the order's user.
     * @allow (get) - User can read their own order.
     * @allow (update) - Not allowed.
     * @allow (delete) - Not allowed.
     * @deny (create) - User cannot create an order for another user.
     * @deny (get) - User cannot read another user's order.
     * @principle Enforces document ownership for orders.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for affiliate user data.
     * @path /affiliates/{affiliateId}
     * @allow (create) - User can create their affiliate profile if their UID matches the {affiliateId}.
     * @allow (get) - User can read their own affiliate profile.
     * @allow (update) - User can update their own affiliate profile.
     * @allow (delete) - User can delete their own affiliate profile.
     * @deny (create) - User cannot create an affiliate profile with a mismatched ID.
     * @deny (get) - User cannot read another user's affiliate profile.
     * @deny (update) - User cannot update another user's affiliate profile.
     * @deny (delete) - User cannot delete another user's affiliate profile.
     * @principle Enforces document ownership for affiliate data.
     */
    match /affiliates/{affiliateId} {
      allow get: if isOwner(affiliateId);
      allow list: if false;
      allow create: if isOwner(affiliateId) && request.resource.data.user.uid == affiliateId;
      allow update: if isExistingOwner(affiliateId) && request.resource.data.user.uid == resource.data.user.uid;
      allow delete: if isExistingOwner(affiliateId);
    }

    /**
     * @description Security rules for promotional banners.
     * @path /banners/{bannerId}
     * @allow (get) - Anyone can read a banner.
     * @allow (list) - Anyone can list banners.
     * @deny (create) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     * @principle Allows public read access for banners.
     */
    match /banners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for global platform settings.
     * @path /config/platform
     * @allow (get) - Anyone can read the platform settings.
     * @allow (list) - Not allowed.
     * @deny (create) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     * @principle Allows public read access for platform settings.
     */
    match /config/platform {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for affiliate tracking events.
     * @path /affiliateEvents/{eventId}
     * @allow (create) - Anyone can create an affiliate event.
     * @allow (get) - Anyone can read affiliate events.
     * @allow (list) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     */
    match /affiliateEvents/{eventId} {
        allow get: if true;
        allow list: if false;
        allow create: if true; // Consider more restrictive rules.
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Security rules for subscription tiers.
     * @path /subscriptionTiers/{tierId}
     * @allow (get) - Anyone can read a subscription tier.
     * @allow (list) - Anyone can list subscription tiers.
     * @deny (create) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     * @principle Allows public read access for subscription tiers.
     */
    match /subscriptionTiers/{tierId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for product categories.
     * @path /categories/{categoryId}
     * @allow (get) - Anyone can read a category.
     * @allow (list) - Anyone can list categories.
     * @deny (create) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for geographical locations.
     * @path /locations/{locationId}
     * @allow (get) - Anyone can read a location.
     * @allow (list) - Anyone can list locations.
     * @deny (create) - Not allowed.
     * @deny (update) - Not allowed.
     * @deny (delete) - Not allowed.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}