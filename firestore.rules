/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes developer iteration speed by focusing on authorization.
 * It enforces strict user-based access control and relational integrity where necessary,
 * but it skips comprehensive data validation to allow for rapid schema changes.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile data, accessible only by the owning user.
 * - `/products/{productId}`: Stores product data; publicly readable, owner-only write access.
 * - `/orders/{orderId}`: Stores order data; publicly readable, but write operations are not permitted.
 * - `/affiliates/{affiliateId}`: Stores affiliate data, accessible only by the affiliate.
 * - `/banners/{bannerId}`: Stores promotional banners; publicly readable, write access is not permitted.
 * - `/config/platform`: Stores platform-wide configuration, write access is not permitted.
 * - `/affiliateEvents/{eventId}`: Stores affiliate event data, write access is not permitted.
 * - `/subscriptionTiers/{tierId}`: Stores subscription tier information; publicly readable, write access is not permitted.
 *
 * Key Security Decisions:
 * - User listing is disallowed for all collections to protect privacy.
 * - Data validation is relaxed to speed up prototyping, focusing only on ownership and relational integrity.
 * - Strict ownership is enforced for user profiles and write access to products.
 * - The root level collections: orders, banners, config/platform, affiliateEvents and subscriptionTiers are publicly readable, with no write access.
 *
 * Denormalization for Authorization:
 *  - Products have a `sellerId` field to easily verify ownership during create, update, and delete operations.
 *
 * Structural Segregation:
 *  - No specific segregation is implemented in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (get, list, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a mismatched {userId}.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to product data.
     * @path /products/{productId}
     * @allow (get, list) Products are publicly readable.
     * @allow (create) User can create a product if they are the seller.
     * @allow (update, delete) User can only update or delete their own products.
     * @deny (create) User cannot create a product with a mismatched sellerId.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /products/{productId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(sellerId) {
            return isSignedIn() && request.auth.uid == sellerId;
        }

        function isExistingOwner(sellerId) {
            return isOwner(sellerId) && resource != null;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.sellerId);
        allow delete: if isExistingOwner(resource.data.sellerId);
    }

    /**
     * @description Manages access to order data.
     * @path /orders/{orderId}
     * @allow (get, list) Orders are publicly readable.
     * @deny (create, update, delete) Write operations are not permitted.
     * @principle Orders are read-only in this prototype.
     */
    match /orders/{orderId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access to affiliate data.
     * @path /affiliates/{affiliateId}
     * @allow (get, update, delete) User can only access their own affiliate data.
     * @allow (create) User with matching {affiliateId} can create their affiliate data.
     * @deny (create) User cannot create an affiliate with a mismatched {affiliateId}.
     * @deny list operations.
     * @principle Enforces user-ownership for affiliate data.
     */
    match /affiliates/{affiliateId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(affiliateId) {
            return isSignedIn() && request.auth.uid == affiliateId;
        }

        function isExistingOwner(affiliateId) {
            return isOwner(affiliateId) && resource != null;
        }

        allow get: if isOwner(affiliateId);
        allow list: if false;
        allow create: if isOwner(affiliateId) && request.resource.data.user.uid == affiliateId;
        allow update: if isExistingOwner(affiliateId) && request.resource.data.user.uid == resource.data.user.uid;
        allow delete: if isExistingOwner(affiliateId);
    }

    /**
     * @description Manages access to banner data.
     * @path /banners/{bannerId}
     * @allow (get, list) Banners are publicly readable.
     * @deny (create, update, delete) Write operations are not permitted.
     * @principle Banners are read-only in this prototype.
     */
    match /banners/{bannerId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access to platform configuration.
     * @path /config/platform
     * @allow (get) Platform configuration is publicly readable.
     * @deny (list, create, update, delete) Write operations are not permitted.
     * @principle Platform configuration is read-only in this prototype.
     */
    match /config/platform {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access to affiliate event data.
     * @path /affiliateEvents/{eventId}
     * @allow (get, list) Affiliate events are publicly readable.
     * @deny (create, update, delete) Write operations are not permitted.
     */
    match /affiliateEvents/{eventId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

      /**
       * @description Manages access to subscription tier information.
       * @path /subscriptionTiers/{tierId}
       * @allow (get, list) Subscription tiers are publicly readable.
       * @deny (create, update, delete) Write operations are not permitted.
       * @principle Subscription tiers are read-only in this prototype.
       */
      match /subscriptionTiers/{tierId} {
          allow get: if true;
          allow list: if true;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
      }
  }
}