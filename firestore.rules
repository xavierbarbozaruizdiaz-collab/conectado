/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts
 * write access to specific roles or ownership. Read access is generally public
 * for products and banners, with restricted write access. Listing of the `users` collection is forbidden.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the respective user.
 * - /products/{productId}: Products available on the platform. Publicly readable, owner-restricted writes.
 * - /orders/{orderId}: Orders placed by users.
 * - /affiliates/{affiliateId}: Affiliate user data.
 * - /banners/{bannerId}: Promotional banners for the homepage.
 * - /config/platform: Platform-wide configuration settings (single document).
 * - /affiliateEvents/{eventId}: Affiliate event tracking data.
 * - /subscriptionTiers/{tierId}: Subscription tier definitions.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of all users is explicitly denied.
 * - Products and banners are publicly readable but only writable by authorized users (e.g., admins - not implemented in this version).
 * - Platform settings can only be read and written by admins (not implemented in this version).
 * - Orders are only writable by authorized users (e.g., admins - not implemented in this version).
 * - Affiliate data is only writable by authorized users (e.g., admins - not implemented in this version).
 * - Affiliate events are only writable by authorized users (e.g., admins - not implemented in this version).
 * - Subscription tiers are only writable by authorized users (e.g., admins - not implemented in this version).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures the user is signed in
     */
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description User profiles are private and only accessible/modifiable by the user themselves.
     * @path /users/{userId}
     * @allow (create) User 'user123' creates their profile with matching UID in the document.
     * @allow (update) User 'user123' updates their own profile.
     * @deny (create) User 'user456' attempts to create a profile for 'user123'.
     * @deny (update) User 'user456' attempts to update 'user123's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      // Allow create if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Allow update and delete only if the user is the owner and the document exists
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Products are publicly readable, but only writable by authorized users.
     * @path /products/{productId}
     * @allow (get) Any user can read product details.
     * @allow (list) Any user can list products.
     * @deny (create) Unauthorized user attempts to create a product.
     * @deny (update) Unauthorized user attempts to update a product.
     * @principle Public read, owner-only writes (requires 'sellerId' field).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin/seller validation.
    }

    /**
     * @description Orders can only be created by authenticated users and only updated/deleted by authorized users (e.g., admins).
     * @path /orders/{orderId}
     * @allow (create) Authenticated user creates a new order.
     * @deny (get) Unauthorized user tries to access order data.
     * @principle Authentication and authorization required for order management.
     */
    match /orders/{orderId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Affiliate data management is restricted to authorized users (e.g., admins).
     * @path /affiliates/{affiliateId}
     * @deny (get) Unauthorized user tries to access affiliate data.
     * @principle Authorization required for affiliate management.
     */
    match /affiliates/{affiliateId} {
        allow get: if false;
        allow list: if false;
        allow create, update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Banners are publicly readable, but only writable by authorized users.
     * @path /banners/{bannerId}
     * @allow (get) Any user can read banner details.
     * @allow (list) Any user can list banners.
     * @deny (create) Unauthorized user attempts to create a banner.
     * @principle Public read, restricted writes.
     */
    match /banners/{bannerId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Platform settings management is restricted to authorized users (e.g., admins).
     * @path /config/platform
     * @deny (get) Unauthorized user tries to access platform settings.
     * @principle Authorization required for platform configuration.
     */
    match /config/platform {
        allow get: if false;
        allow list: if false;
        allow create, update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Affiliate event data management is restricted to authorized users (e.g., admins).
     * @path /affiliateEvents/{eventId}
     * @deny (get) Unauthorized user tries to access affiliate event data.
     * @principle Authorization required for affiliate event management.
     */
    match /affiliateEvents/{eventId} {
        allow get: if false;
        allow list: if false;
        allow create, update, delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Subscription tier data management is restricted to authorized users (e.g., admins).
     * @path /subscriptionTiers/{tierId}
     * @deny (get) Unauthorized user tries to access subscription tier data.
     * @principle Authorization required for subscription tier management.
     */
    match /subscriptionTiers/{tierId} {
        allow get: if false;
        allow list: if false;
        allow create, update, delete: if false; // TODO: Add admin validation.
    }
  }
}