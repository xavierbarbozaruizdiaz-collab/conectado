/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles and ownership.
 * Schema validation is relaxed to enable rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /products/{productId}: Stores product information. Read access is public, but writes are restricted to the product owner.
 * - /orders/{orderId}: Stores order information.  Currently unprotected for prototyping.
 * - /affiliates/{affiliateId}: Stores affiliate data. Access is restricted to the owning user.
 * - /banners/{bannerId}: Stores promotional banners. Read access is public, writes are unprotected.
 * - /config/platform: Stores global platform settings. Currently unprotected.
 * - /affiliateEvents/{eventId}: Stores affiliate event data. Currently unprotected.
 * - /subscriptionTiers/{tierId}: Stores subscription tier data. Read access is public.
 * - /categories/{categoryId}: Stores product categories. Read access is public, writes are unprotected.
 * - /locations/{locationId}: Stores geographical locations. Read access is public, writes are unprotected.
 *
 * Key Security Decisions:
 * - Listing of `/users` is denied to prevent information disclosure.
 * - Read-only collections like `/subscriptionTiers`, `/categories`, and `/locations` are publicly readable.
 * - Ownership is enforced for user profiles and products, enabling owner-only writes.
 *
 * Denormalization for Authorization:
 * - The `/products/{productId}` collection requires the `sellerId` field to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership and Existence Check
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @allow (get) User with UID 'user123' retrieves their own profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user123' tries to create profile for 'user456'.
     * @deny (get) User with UID 'user123' tries to retrieve profile for 'user456'.
     * @deny (update) User with UID 'user123' tries to update profile for 'user456'.
     * @deny (delete) User with UID 'user123' tries to delete profile for 'user456'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages products, allowing public read but owner-only writes.
     * @path /products/{productId}
     * @allow (get) Any user can retrieve product information.
     * @allow (list) Any user can list products.
     * @allow (create) User with UID 'user123' creates a product with 'sellerId' set to 'user123'.
     * @allow (update) User with UID 'user123' updates a product where 'resource.data.sellerId' is 'user123'.
     * @allow (delete) User with UID 'user123' deletes a product where 'resource.data.sellerId' is 'user123'.
     * @deny (create) User with UID 'user123' creates a product with 'sellerId' set to 'user456'.
     * @deny (update) User with UID 'user123' updates a product where 'resource.data.sellerId' is 'user456'.
     * @deny (delete) User with UID 'user123' deletes a product where 'resource.data.sellerId' is 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.sellerId) && request.resource.data.sellerId == resource.data.sellerId;
      allow delete: if isExistingOwner(resource.data.sellerId);
    }

    /**
     * @description Controls access to customer orders.
     * @path /orders/{orderId}
     * @allow (get) Any user can retrieve order information.
     * @allow (list) Any user can list orders.
     * @allow (create) Any signed in user can create an order.
     * @allow (update) Any signed in user can update an order.
     * @allow (delete) Any signed in user can delete an order.
     * @principle Open access for prototyping.
     */
    match /orders/{orderId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Restricts access to affiliate user data.
     * @path /affiliates/{affiliateId}
     * @allow (get) User with UID 'user123' retrieves their own affiliate data.
     * @allow (update) User with UID 'user123' updates their own affiliate data.
     * @allow (delete) User with UID 'user123' deletes their own affiliate data.
     * @deny (create) User with UID 'user123' tries to create affiliate data for 'user456'.
     * @deny (get) User with UID 'user123' tries to retrieve affiliate data for 'user456'.
     * @deny (update) User with UID 'user123' tries to update affiliate data for 'user456'.
     * @deny (delete) User with UID 'user123' tries to delete affiliate data for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /affiliates/{affiliateId} {
      allow get: if isOwner(affiliateId);
      allow list: if false;
      allow create: if isOwner(affiliateId) && request.resource.data.user.uid == affiliateId;
      allow update: if isExistingOwner(affiliateId) && request.resource.data.user.uid == resource.data.user.uid;
      allow delete: if isExistingOwner(affiliateId);
    }

    /**
     * @description Manages promotional banners for the homepage.
     * @path /banners/{bannerId}
     * @allow (get) Any user can retrieve banner information.
     * @allow (list) Any user can list banners.
     * @allow (create) Any signed in user can create a banner.
     * @allow (update) Any signed in user can update a banner.
     * @allow (delete) Any signed in user can delete a banner.
     * @principle Open access for prototyping.
     */
    match /banners/{bannerId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Stores global platform settings.
     * @path /config/platform
     * @allow (get) Any user can retrieve platform settings.
     * @allow (create) Any signed in user can create platform settings.
     * @allow (update) Any signed in user can update platform settings.
     * @allow (delete) Any signed in user can delete platform settings.
     * @principle Open access for prototyping.
     */
    match /config/platform {
        allow get: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Stores tracking events for affiliate links (clicks, conversions).
     * @path /affiliateEvents/{eventId}
     * @allow (get) Any user can retrieve affiliate event information.
     * @allow (list) Any user can list affiliate events.
     * @allow (create) Any signed in user can create an affiliate event.
     * @allow (update) Any signed in user can update an affiliate event.
     * @allow (delete) Any signed in user can delete an affiliate event.
     * @principle Open access for prototyping.
     */
    match /affiliateEvents/{eventId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Stores the available subscription plans for users.
     * @path /subscriptionTiers/{tierId}
     * @allow (get) Any user can retrieve subscription tier information.
     * @allow (list) Any user can list subscription tiers.
     * @deny (create) No one can create a subscription tier.
     * @deny (update) No one can update a subscription tier.
     * @deny (delete) No one can delete a subscription tier.
     * @principle Public read, restricted write.
     */
    match /subscriptionTiers/{tierId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Stores product categories, manageable by admins.
     * @path /categories/{categoryId}
     * @allow (get) Any user can retrieve category information.
     * @allow (list) Any user can list categories.
     * @allow (create) Any signed in user can create a category.
     * @allow (update) Any signed in user can update a category.
     * @allow (delete) Any signed in user can delete a category.
     * @principle Open access for prototyping.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Stores geographical locations like departments and cities/sub-locations.
     * @path /locations/{locationId}
     * @allow (get) Any user can retrieve location information.
     * @allow (list) Any user can list locations.
     * @allow (create) Any signed in user can create a location.
     * @allow (update) Any signed in user can update a location.
     * @allow (delete) Any signed in user can delete a location.
     * @principle Open access for prototyping.
     */
    match /locations/{locationId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}